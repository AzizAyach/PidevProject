<?php

namespace Proxies\__CG__\Projet\FreelancerBundle\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class Question extends \Projet\FreelancerBundle\Entity\Question implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = array();



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return array('__isInitialized__', '' . "\0" . 'Projet\\FreelancerBundle\\Entity\\Question' . "\0" . 'nom', '' . "\0" . 'Projet\\FreelancerBundle\\Entity\\Question' . "\0" . 'reponseCorrect', '' . "\0" . 'Projet\\FreelancerBundle\\Entity\\Question' . "\0" . 'reponseFausse1', '' . "\0" . 'Projet\\FreelancerBundle\\Entity\\Question' . "\0" . 'reponseFausse2', '' . "\0" . 'Projet\\FreelancerBundle\\Entity\\Question' . "\0" . 'reponseFausse3', '' . "\0" . 'Projet\\FreelancerBundle\\Entity\\Question' . "\0" . 'reponseFausse4', '' . "\0" . 'Projet\\FreelancerBundle\\Entity\\Question' . "\0" . 'idCategorie', '' . "\0" . 'Projet\\FreelancerBundle\\Entity\\Question' . "\0" . 'idQuest', '' . "\0" . 'Projet\\FreelancerBundle\\Entity\\Question' . "\0" . 'idTest');
        }

        return array('__isInitialized__', '' . "\0" . 'Projet\\FreelancerBundle\\Entity\\Question' . "\0" . 'nom', '' . "\0" . 'Projet\\FreelancerBundle\\Entity\\Question' . "\0" . 'reponseCorrect', '' . "\0" . 'Projet\\FreelancerBundle\\Entity\\Question' . "\0" . 'reponseFausse1', '' . "\0" . 'Projet\\FreelancerBundle\\Entity\\Question' . "\0" . 'reponseFausse2', '' . "\0" . 'Projet\\FreelancerBundle\\Entity\\Question' . "\0" . 'reponseFausse3', '' . "\0" . 'Projet\\FreelancerBundle\\Entity\\Question' . "\0" . 'reponseFausse4', '' . "\0" . 'Projet\\FreelancerBundle\\Entity\\Question' . "\0" . 'idCategorie', '' . "\0" . 'Projet\\FreelancerBundle\\Entity\\Question' . "\0" . 'idQuest', '' . "\0" . 'Projet\\FreelancerBundle\\Entity\\Question' . "\0" . 'idTest');
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (Question $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', array());
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', array());
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function setNom($nom)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setNom', array($nom));

        return parent::setNom($nom);
    }

    /**
     * {@inheritDoc}
     */
    public function getNom()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getNom', array());

        return parent::getNom();
    }

    /**
     * {@inheritDoc}
     */
    public function setReponseCorrect($reponseCorrect)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setReponseCorrect', array($reponseCorrect));

        return parent::setReponseCorrect($reponseCorrect);
    }

    /**
     * {@inheritDoc}
     */
    public function getReponseCorrect()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getReponseCorrect', array());

        return parent::getReponseCorrect();
    }

    /**
     * {@inheritDoc}
     */
    public function setReponseFausse1($reponseFausse1)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setReponseFausse1', array($reponseFausse1));

        return parent::setReponseFausse1($reponseFausse1);
    }

    /**
     * {@inheritDoc}
     */
    public function getReponseFausse1()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getReponseFausse1', array());

        return parent::getReponseFausse1();
    }

    /**
     * {@inheritDoc}
     */
    public function setReponseFausse2($reponseFausse2)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setReponseFausse2', array($reponseFausse2));

        return parent::setReponseFausse2($reponseFausse2);
    }

    /**
     * {@inheritDoc}
     */
    public function getReponseFausse2()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getReponseFausse2', array());

        return parent::getReponseFausse2();
    }

    /**
     * {@inheritDoc}
     */
    public function setReponseFausse3($reponseFausse3)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setReponseFausse3', array($reponseFausse3));

        return parent::setReponseFausse3($reponseFausse3);
    }

    /**
     * {@inheritDoc}
     */
    public function getReponseFausse3()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getReponseFausse3', array());

        return parent::getReponseFausse3();
    }

    /**
     * {@inheritDoc}
     */
    public function setReponseFausse4($reponseFausse4)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setReponseFausse4', array($reponseFausse4));

        return parent::setReponseFausse4($reponseFausse4);
    }

    /**
     * {@inheritDoc}
     */
    public function getReponseFausse4()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getReponseFausse4', array());

        return parent::getReponseFausse4();
    }

    /**
     * {@inheritDoc}
     */
    public function setIdCategorie($idCategorie)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setIdCategorie', array($idCategorie));

        return parent::setIdCategorie($idCategorie);
    }

    /**
     * {@inheritDoc}
     */
    public function getIdCategorie()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getIdCategorie', array());

        return parent::getIdCategorie();
    }

    /**
     * {@inheritDoc}
     */
    public function getIdQuest()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getIdQuest();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getIdQuest', array());

        return parent::getIdQuest();
    }

    /**
     * {@inheritDoc}
     */
    public function setIdTest(\Projet\FreelancerBundle\Entity\Test $idTest = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setIdTest', array($idTest));

        return parent::setIdTest($idTest);
    }

    /**
     * {@inheritDoc}
     */
    public function getIdTest()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getIdTest', array());

        return parent::getIdTest();
    }

}
